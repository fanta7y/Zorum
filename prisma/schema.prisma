// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  name     String  @db.VarChar(255)
  surname  String  @db.VarChar(255)
  nick     String? @db.VarChar(255)
  image    String? @db.VarChar(255)
  password String  @db.Text()
  email    String  @unique @db.VarChar(255)
  gender   Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  createdTeams Team[]
  info         UserInfo[]
  teams        TeamUser[]
  sendTeam     TeamMess[]
  sendUser     DirMess[]
  recUser      RecMess[]
  TeamDialog   TeamDialog[]

  @@map("users")
}

model Team {
  num   Int     @id @default(autoincrement())
  id    String  @unique @default(uuid())
  name  String  @db.VarChar(255)
  title String? @db.VarChar(255)
  lead  String  @db.VarChar(255)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  leader User @relation(fields: [lead], references: [username])

  members    TeamUser[]
  TeamMess   TeamMess[]
  TeamDialog TeamDialog[]

  @@map("teams")
}

model TeamUser {
  id       Int        @id @default(autoincrement())
  username String     @db.VarChar(255)
  team_id  Int
  user     User       @relation(fields: [username], references: [username])
  team     Team       @relation(fields: [team_id], references: [num])
  TeamMess TeamMess[]

  @@map("teamusers")
}

model UserInfo {
  id      Int     @id @default(autoincrement())
  user_id Int
  link    String?
  user    User    @relation(fields: [user_id], references: [id])

  @@map("info")
}

model TeamMess {
  id       Int    @id @default(autoincrement())
  tm_id    Int
  username String @db.VarChar(255)
  from_id  Int?
  text_id  Int
  send     Int

  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
  team       Team         @relation(fields: [tm_id], references: [num])
  user       User         @relation(fields: [username], references: [username])
  from       TeamUser?    @relation(fields: [from_id], references: [id])
  text       Text         @relation(fields: [text_id], references: [id])
  TeamDialog TeamDialog[]

  @@map("tmess")
}

model DirMess {
  id Int @id @default(autoincrement())

  from_id Int
  to_id   Int
  User    User? @relation(fields: [userId], references: [id])
  userId  Int?

  @@map("dirmess")
}

model Text {
  id   Int    @id @default(autoincrement())
  text String @db.Text()

  TeamMess TeamMess[]
  TextFile TextFile[]

  @@map("texts")
}

model TeamDialog {
  id       Int    @id @default(autoincrement())
  tm_id    Int
  username String
  mid      Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  last_mess TeamMess @relation(fields: [mid], references: [id])
  team      Team     @relation(fields: [tm_id], references: [num])
  user      User     @relation(fields: [username], references: [username])

  @@map("rooms")
}

model RecMess {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model File {
  id           Int    @id @default(autoincrement())
  type         String @db.VarChar(255)
  originalname String @db.Text()

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  TextFile TextFile[]
}

model TextFile {
  id      Int @id @default(autoincrement())
  file_id Int
  text_id Int

  text Text @relation(fields: [text_id], references: [id])
  file File @relation(fields: [file_id], references: [id])
}
